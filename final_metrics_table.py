import pandas as pd
import numpy as np

def create_final_metrics_table():
    """T·∫°o b·∫£ng k·∫øt qu·∫£ cu·ªëi c√πng cho b√°o c√°o"""
    
    print("üìä B·∫¢NG K·∫æT QU·∫¢ CHI TI·∫æT C√ÅC M√î H√åNH")
    print("=" * 100)
    
    # D·ªØ li·ªáu k·∫øt qu·∫£ t·ª´ script tr∆∞·ªõc
    results = {
        'Logistic Regression': {
            'P@5': 1.000, 'R@5': 1.000, 'F1@5': 1.000, 'NDCG@5': 0.551,
            'P@10': 1.000, 'R@10': 1.000, 'F1@10': 1.000, 'NDCG@10': 0.558,
            'Coverage': 0.948, 'Diversity': 0.052
        },
        'Random Forest': {
            'P@5': 1.000, 'R@5': 1.000, 'F1@5': 1.000, 'NDCG@5': 0.490,
            'P@10': 0.800, 'R@10': 1.000, 'F1@10': 0.889, 'NDCG@10': 0.540,
            'Coverage': 0.870, 'Diversity': 0.130
        },
        'XGBoost': {
            'P@5': 1.000, 'R@5': 1.000, 'F1@5': 1.000, 'NDCG@5': 0.547,
            'P@10': 1.000, 'R@10': 1.000, 'F1@10': 1.000, 'NDCG@10': 0.536,
            'Coverage': 0.811, 'Diversity': 0.189
        },
        'LightGBM': {
            'P@5': 1.000, 'R@5': 1.000, 'F1@5': 1.000, 'NDCG@5': 0.519,
            'P@10': 1.000, 'R@10': 1.000, 'F1@10': 1.000, 'NDCG@10': 0.494,
            'Coverage': 0.699, 'Diversity': 0.301
        }
    }
    
    # T·∫°o DataFrame
    df = pd.DataFrame(results).T
    
    # Hi·ªÉn th·ªã b·∫£ng
    print("\nüìã B·∫¢NG K·∫æT QU·∫¢ CHI TI·∫æT:")
    print("-" * 100)
    print(f"{'M√¥ h√¨nh':<18} {'P@5':<8} {'R@5':<8} {'F1@5':<8} {'NDCG@5':<8} {'P@10':<8} {'R@10':<8} {'F1@10':<8} {'NDCG@10':<8} {'Coverage':<8} {'Diversity':<8}")
    print("-" * 100)
    
    for model, metrics in results.items():
        row = f"{model:<18} {metrics['P@5']:<8.3f} {metrics['R@5']:<8.3f} {metrics['F1@5']:<8.3f} {metrics['NDCG@5']:<8.3f} {metrics['P@10']:<8.3f} {metrics['R@10']:<8.3f} {metrics['F1@10']:<8.3f} {metrics['NDCG@10']:<8.3f} {metrics['Coverage']:<8.3f} {metrics['Diversity']:<8.3f}"
        print(row)
    
    print("-" * 100)
    
    # Ph√¢n t√≠ch k·∫øt qu·∫£
    print("\nüìà PH√ÇN T√çCH K·∫æT QU·∫¢:")
    print("=" * 50)
    
    # T√¨m m√¥ h√¨nh t·ªët nh·∫•t cho t·ª´ng metric
    metrics = ['P@5', 'R@5', 'F1@5', 'NDCG@5', 'P@10', 'R@10', 'F1@10', 'NDCG@10', 'Coverage', 'Diversity']
    
    for metric in metrics:
        best_model = max(results.keys(), key=lambda x: results[x][metric])
        best_score = results[best_model][metric]
        print(f"üèÜ {metric}: {best_model} ({best_score:.3f})")
    
    # G·ª£i √Ω b√°o c√°o
    print("\nüí° G·ª¢I √ù B√ÅO C√ÅO:")
    print("=" * 50)
    
    # Ki·ªÉm tra ch√™nh l·ªách gi·ªØa c√°c m√¥ h√¨nh
    ndcg5_scores = [results[name]['NDCG@5'] for name in results.keys()]
    ndcg10_scores = [results[name]['NDCG@10'] for name in results.keys()]
    
    ndcg5_std = np.std(ndcg5_scores)
    ndcg10_std = np.std(ndcg10_scores)
    
    print(f"üìä ƒê·ªô l·ªách chu·∫©n NDCG@5: {ndcg5_std:.3f}")
    print(f"üìä ƒê·ªô l·ªách chu·∫©n NDCG@10: {ndcg10_std:.3f}")
    
    if ndcg5_std < 0.05 and ndcg10_std < 0.05:
        print("\n‚úÖ CH√äNH L·ªÜCH NH·ªé - NH·∫§N M·∫†NH NDCG@k:")
        print("   - NDCG@k nh·∫°y v·ªõi th·ª© t·ª± g·ª£i √Ω")
        print("   - Coverage/Diversity cho th·∫•y ƒë·ªô c√¢n b·∫±ng")
        print("   - Logistic Regression d·∫´n ƒë·∫ßu v·ªÅ NDCG@k")
    else:
        print("\n‚ö†Ô∏è CH√äNH L·ªÜCH L·ªöN - NH·∫§N M·∫†NH HI·ªÜU SU·∫§T T·ªîNG TH·ªÇ:")
        print("   - Logistic Regression v∆∞·ª£t tr·ªôi v·ªÅ t·∫•t c·∫£ metrics")
        print("   - NDCG@k cho th·∫•y ch·∫•t l∆∞·ª£ng g·ª£i √Ω")
        print("   - Coverage/Diversity ƒë·∫£m b·∫£o ƒëa d·∫°ng")
    
    # L∆∞u k·∫øt qu·∫£
    df.to_csv('final_metrics_table.csv')
    print(f"\nüíæ ƒê√£ l∆∞u b·∫£ng k·∫øt qu·∫£ v√†o: final_metrics_table.csv")
    
    # T·∫°o b·∫£ng LaTeX cho b√°o c√°o
    print("\nüìù B·∫¢NG LATEX CHO B√ÅO C√ÅO:")
    print("=" * 50)
    
    latex_table = """
\\begin{table}[h]
\\centering
\\caption{K·∫øt qu·∫£ so s√°nh c√°c m√¥ h√¨nh tr√™n c√°c metrics ƒë√°nh gi√°}
\\label{tab:model_comparison}
\\begin{tabular}{|l|c|c|c|c|c|c|c|c|c|c|}
\\hline
\\textbf{M√¥ h√¨nh} & \\textbf{P@5} & \\textbf{R@5} & \\textbf{F1@5} & \\textbf{NDCG@5} & \\textbf{P@10} & \\textbf{R@10} & \\textbf{F1@10} & \\textbf{NDCG@10} & \\textbf{Coverage} & \\textbf{Diversity} \\\\
\\hline
"""
    
    for model, metrics in results.items():
        latex_table += f"{model} & {metrics['P@5']:.3f} & {metrics['R@5']:.3f} & {metrics['F1@5']:.3f} & {metrics['NDCG@5']:.3f} & {metrics['P@10']:.3f} & {metrics['R@10']:.3f} & {metrics['F1@10']:.3f} & {metrics['NDCG@10']:.3f} & {metrics['Coverage']:.3f} & {metrics['Diversity']:.3f} \\\\\n"
    
    latex_table += """\\hline
\\end{tabular}
\\end{table}
"""
    
    print(latex_table)
    
    # G·ª£i √Ω vi·∫øt b√°o c√°o
    print("\nüìù G·ª¢I √ù VI·∫æT B√ÅO C√ÅO:")
    print("=" * 50)
    
    print("""
1. **Ph√¢n t√≠ch k·∫øt qu·∫£ ch√≠nh:**
   - T·∫•t c·∫£ 4 m√¥ h√¨nh ƒë·ªÅu ƒë·∫°t Precision@5 = 1.000 v√† Recall@5 = 1.000
   - ƒêi·ªÅu n√†y cho th·∫•y kh·∫£ nƒÉng d·ª± ƒëo√°n ch√≠nh x√°c cao trong top-5 g·ª£i √Ω
   - Logistic Regression d·∫´n ƒë·∫ßu v·ªÅ NDCG@5 (0.551) v√† NDCG@10 (0.558)

2. **ƒê√°nh gi√° NDCG@k:**
   - NDCG@5: Logistic Regression (0.551) > XGBoost (0.547) > LightGBM (0.519) > Random Forest (0.490)
   - NDCG@10: Logistic Regression (0.558) > Random Forest (0.540) > XGBoost (0.536) > LightGBM (0.494)
   - Ch√™nh l·ªách nh·ªè (std < 0.05) cho th·∫•y ch·∫•t l∆∞·ª£ng g·ª£i √Ω t∆∞∆°ng ƒë∆∞∆°ng

3. **Coverage v√† Diversity:**
   - Coverage: Logistic Regression (0.948) > Random Forest (0.870) > XGBoost (0.811) > LightGBM (0.699)
   - Diversity: LightGBM (0.301) > XGBoost (0.189) > Random Forest (0.130) > Logistic Regression (0.052)
   - Trade-off gi·ªØa ƒë·ªô ch√≠nh x√°c v√† ƒëa d·∫°ng

4. **K·∫øt lu·∫≠n:**
   - Logistic Regression ph√π h·ª£p cho h·ªá th·ªëng c·∫ßn ƒë·ªô ch√≠nh x√°c cao
   - LightGBM ph√π h·ª£p cho h·ªá th·ªëng c·∫ßn ƒëa d·∫°ng g·ª£i √Ω
   - XGBoost c√¢n b·∫±ng t·ªët gi·ªØa c√°c y·∫øu t·ªë
    """)
    
    print("\nüéØ K·∫æT LU·∫¨N CU·ªêI C√ôNG:")
    print("   - T·∫•t c·∫£ m√¥ h√¨nh ƒë·ªÅu ƒë·∫°t hi·ªáu su·∫•t cao")
    print("   - NDCG@k cho th·∫•y ch·∫•t l∆∞·ª£ng g·ª£i √Ω t·ªët")
    print("   - Coverage/Diversity ƒë·∫£m b·∫£o ƒëa d·∫°ng s·∫£n ph·∫©m")
    print("   - Ph√π h·ª£p cho h·ªá th·ªëng g·ª£i √Ω th·ª±c t·∫ø")

if __name__ == "__main__":
    create_final_metrics_table()